/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package sankuai.com/udss/planning_competition/map_client_sdk */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "map_client_sdk.go"
 // go build -buildmode=c-shared -o libmap_client_sdk.go.so

 #include <stdlib.h>
 #include <string.h>
 #include <stdint.h>
 #ifdef __cplusplus
 extern "C" {
 #endif
 // semantuc defines
 // 普通地面
 #define SEM_GROUND 0
 // 绿植区
 #define SEM_VEGETATION 3
 // 道路
 #define SEM_ROAD 4
 // 房屋
 #define SEM_BUILDING 8
 // 危险区域
 #define SEM_DANGEROUS 18
 // 错误， 查询地图外
 #define SEM_ERROR 255
 struct mtVoxel {
   // if zero, means obstacle,
   // if not zero, means free space, value is nearest distance to obstacle
   float distance;
   // query point height to ground
   float cur_height_to_ground;
   // voxel height to ground
   uint16_t height_to_ground;
   // if distance is 0, means voxel obstacle type
   uint8_t semantic;
 } __attribute__((packed));
 typedef uint32_t mtMapHandle;
 #ifdef __cplusplus
 }
 #endif

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// create map client with server addr[:port]
// synchronized function, return when connected
// param:
//   serverAddr server address, maybe ip:port or pipe:path_to_unix_socket
//   serverPort
// ret:
//   map handle, if 0 mean fail
extern mtMapHandle MtMapCreateClient(char* serverAddr, int serverPort);
extern mtMapHandle MtMapCreateLocal(char* localMapPath);

// query voxel info, xyz must in NED frame
extern GoUint8 MtMapQuery(mtMapHandle handle, float x, float y, float z, struct mtVoxel* voxel);

// query map range in 3 dimensions, [minX, maxX), [minY, maxY), (minZ, maxZ]
extern GoUint8 MtMapRange(mtMapHandle handle, int* minX, int* maxX, int* minY, int* maxY, int* minZ, int* maxZ);

#ifdef __cplusplus
}
#endif
